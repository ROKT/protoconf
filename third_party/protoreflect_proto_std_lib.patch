diff --git a/desc/protoparse/parser.go b/desc/protoparse/parser.go
index 4cdb76f..cd3cf29 100644
--- a/desc/protoparse/parser.go
+++ b/desc/protoparse/parser.go
@@ -134,6 +134,8 @@ type Parser struct {
 	// fields, excluding enums. (Interpreting default values for enum fields
 	// requires resolving enum names, which requires linking.)
 	InterpretOptionsInUnlinkedFiles bool
+
+	ProtoStdLib map[string]*dpb.FileDescriptorProto
 }
 
 // ParseFiles parses the named files into descriptors. The returned slice has
@@ -173,7 +175,7 @@ func (p Parser) ParseFiles(filenames ...string) ([]*desc.FileDescriptor, error)
 	}
 
 	protos := map[string]*parseResult{}
-	err := parseProtoFiles(accessor, filenames, true, true, protos)
+	err := parseProtoFiles(accessor, filenames, true, true, protos, p.ProtoStdLib)
 	if err != nil {
 		return nil, err
 	}
@@ -233,7 +235,7 @@ func (p Parser) ParseFilesButDoNotLink(filenames ...string) ([]*dpb.FileDescript
 	}
 
 	protos := map[string]*parseResult{}
-	err := parseProtoFiles(accessor, filenames, false, p.ValidateUnlinkedFiles, protos)
+	err := parseProtoFiles(accessor, filenames, false, p.ValidateUnlinkedFiles, protos, p.ProtoStdLib)
 	if err != nil {
 		return nil, err
 	}
@@ -364,7 +366,7 @@ func fixupFilenames(protos map[string]*parseResult) map[string]*parseResult {
 	return revisedProtos
 }
 
-func parseProtoFiles(acc FileAccessor, filenames []string, recursive, validate bool, parsed map[string]*parseResult) error {
+func parseProtoFiles(acc FileAccessor, filenames []string, recursive, validate bool, parsed map[string]*parseResult, protoStdLib map[string]*dpb.FileDescriptorProto) error {
 	for _, name := range filenames {
 		if _, ok := parsed[name]; ok {
 			continue
@@ -389,12 +391,14 @@ func parseProtoFiles(acc FileAccessor, filenames []string, recursive, validate b
 			//  parsers, which could result in unsafe races if multiple
 			//  parsers are trying to access it concurrently)
 			parsed[name] = &parseResult{fd: proto.Clone(d).(*dpb.FileDescriptorProto)}
+		} else if d, ok := protoStdLib[name]; ok {
+			parsed[name] = &parseResult{fd: proto.Clone(d).(*dpb.FileDescriptorProto)}
 		} else {
 			return err
 		}
 
 		if recursive {
-			err = parseProtoFiles(acc, parsed[name].fd.Dependency, true, validate, parsed)
+			err = parseProtoFiles(acc, parsed[name].fd.Dependency, true, validate, parsed, protoStdLib)
 			if err != nil {
 				switch err.(type) {
 				case ErrorWithSourcePos:
